;;; (load (compile-file "cng.lisp")) 

#|

The Chem Name Game is a rif on a game where there are a number of
human names, and each letter has a different price. To solve the
puzzle you have to figure out the price of each letter. The trick is
that some of the names are exactly one off from one another, for
example "LEO" and "KOLE", and so by subtracting the price of LEO (242)
from KOLE (249), you discover that "K" costs 7. So you go around doing
all the one-offs, and then plug those into the more complex ones, and
so on, and soon enough you end up figuring them all out. Amuzing as
this little puzzle is, I thought that it might be more interesting to
do a STEM-related version of pretty much the same thing by using atom
weights of the elements, and molecular weights of molecules.

|#

(defparameter *elements*
  '(
    (1 "H" "Hydrogen" 1)
    (2 "He" "Helium" 4)
    (3 "Li" "Lithium" 7)
    (4 "Be" "Beryllium" 9)
    (5 "B" "Boron" 11)
    (6 "C" "Carbon" 12)
    (7 "N" "Nitrogen" 14)
    (8 "O" "Oxygen" 16)
    (9 "F" "Fluorine" 19)
    (10 "Ne" "Neon" 20)
    (11 "Na" "Sodium" 23)
    (12 "Mg" "Magnesium" 24)
    (13 "Al" "Aluminium" 27)
    (14 "Si" "Silicon" 28)
    (15 "P" "Phosphorus" 31)
    (16 "S" "Sulfur" 32)
    (17 "Cl" "Chlorine" 35)
    (18 "Ar" "Argon" 40)
    (19 "K" "Potassium" 39)
    (20 "Ca" "Calcium" 40)
    (21 "Sc" "Scandium" 45)
    (22 "Ti" "Titanium" 48)
    (23 "V" "Vanadium" 51)
    (24 "Cr" "Chromium" 52)
    (25 "Mn" "Manganese" 55)
    (26 "Fe" "Iron" 56)
    (27 "Co" "Cobalt" 59)
    (28 "Ni" "Nickel" 59)
    (29 "Cu" "Copper" 64)
    (30 "Zn" "Zinc" 65)
    (31 "Ga" "Gallium" 70)
    (32 "Ge" "Germanium" 73)
    (33 "As" "Arsenic" 75)
    (34 "Se" "Selenium" 79)
    (35 "Br" "Bromine" 80)
    (36 "Kr" "Krypton" 84)
    (37 "Rb" "Rubidium" 85)
    (38 "Sr" "Strontium" 88)
    (39 "Y" "Yttrium" 88)
    (40 "Zr" "Zirconium" 91)
    (41 "Nb" "Niobium" 93)
    (42 "Mo" "Molybdenum" 96)
    (43 "Tc" "Technetium" 98)
    (45 "Rh" "Rhodium" 103)
    (46 "Pd" "Palladium" 106)
    (47 "Ag" "Silver" 108)
    (48 "Cd" "Cadmium" 112)
    (49 "In" "Indium" 115)
    (50 "Sn" "Tin" 119)
    (51 "Sb" "Antimony" 122)
    (52 "Te" "Tellurium" 128)
    (53 "I" "Iodine" 127)
    (54 "Xe" "Xenon" 131)
    (55 "Cs" "Caesium" 133)
    (56 "Ba" "Barium" 137)
    (57 "La" "Lanthanum" 139)
    (58 "Ce" "Cerium" 140)
    (59 "Pr" "Praseodymium" 141)
    (60 "Nd" "Neodymium" 144)
    (61 "Pm" "Promethium" 145)
    (62 "Sm" "Samarium" 150)
    (63 "Eu" "Europium" 152)
    (64 "Gd" "Gadolinium" 157)
    (65 "Tb" "Terbium" 159)
    (66 "Dy" "Dysprosium" 163)
    (67 "Ho" "Holmium" 165)
    (68 "Er" "Erbium" 167)
    (69 "Tm" "Thulium" 169)
    (70 "Yb" "Ytterbium" 173)
    (71 "Lu" "Lutetium" 175)
    (72 "Hf" "Hafnium" 178)
    (73 "Ta" "Tantalum" 181)
    (74 "W" "Tungsten" 184)
    (75 "Re" "Rhenium" 186)
    (76 "Os" "Osmium" 190)
    (77 "Ir" "Iridium" 192)
    (78 "Pt" "Platinum" 195)
    (79 "Au" "Gold" 197)
    (80 "Hg" "Mercury" 201)
    (81 "Tl" "Thallium" 204)
    (82 "Pb" "Lead" 207)
    (83 "Bi" "Bismuth" 209)
    (90 "Th" "Thorium" 232)
    (91 "Pa" "Protactinium" 231)
    (92 "U" "Uranium" 238)
    ))

(defparameter *mols* 
  '(
    ("Acetate" "CH3COO")
    ("Aluminate" "AlO2")
    ("Aluminum" "Al")
    ("Ammonium" "NH4")
    ("Arsenate" "AsO4")
    ("Arsenite" "AsO3")
    ("Benzoate" "C7H5O2")
    ("Borate" "BO3")
    ("Bromate" "BrO3")
    ("Bromite" "BrO2")
    ("Carbonate" "CO3")
    ("Chlorate" "ClO3")
    ("Chlorite" "ClO2")
    ("Chromate" "CrO4")
    ("Citrate" "C6H5O7")
    ("Cyanate" "OCN")
    ("Cyanide" "CN")
    ("Dichromate" "Cr2O7")
    ("Dihydrogen Phosphate" "H2PO4")
    ("Dihydrogen Phosphite" "H2PO3")
    ("Ethyl" "C2H5")
    ("Fluorate" "FO3")
    ("Fluorite" "FO2")
    ("Formate" "HCOO")
    ("Hydrogen Carbonate" "HCO3")
    ("Hydrogen Oxalate" "HC2O4")
    ("Hydrogen Phosphate" "HPO4")
    ("Hydrogen Phosphite" "HPO3")
    ("Hydrogen Sulfate" "HSO4")
    ("Hydrogen Sulfite" "HSO3")
    ("Hydroxide" "OH")
    ("Hypobromite" "BrO")
    ("Hypochlorite" "ClO")
    ("Hypofluorite" "FO")
    ("Hypoiodite" "IO")
    ("Hypophosphite" "PO2")
    ("Hyposulfite" "SO2")
    ("Iodate" "IO3")
    ("Iodite" "IO2")
    ("Metaniobate" "NbO3")
    ("Metasilicate" "SiO3")
    ("Metatitanate" "TiO3")
    ("Metavanadate" "VO3")
    ("Molybdate" "MoO3")
    ("Nitrate" "NO3")
    ("Nitrite" "NO2")
    ("Orthomolybdate" "MoO4")
    ("Oxalate" "C2O4")
    ("Perbromate" "BrO4")
    ("Percarbonate" "CO4")
    ("Perchlorate" "ClO4")
    ("Perfluorate" "FO4")
    ("Periodate" "IO4")
    ("Permanganate" "MnO4")
    ("Peroxide" "O2")
    ("Hydrogen Peroxide" "H2O2")
    ("Perphosphate" "PO5")
    ("Persulfate" "S2O8")
    ("Phosphate" "PO4")
    ("Phosphide" "P")
    ("Phosphite" "PO3")
    ("Phthalate" "C8H4O4")
    ("Pyrophosphate" "P2O7")
    ("Selenate" "SeO4")
    ("Selenite" "SeO3")
    ("Silicate" "SiO4")
    ("Sulfate" "SO4")
    ("Sulfite" "SO3")
    ("Tartrate" "C4H4O6")
    ("Tellurate" "TeO4")
    ("Tellurite" "TeO3")
    ("Thiocyanate" "SCN")
    ("Thiosulfate" "S2O3")
    ("Titanate" "TiO3")
    ("Tungstate" "WO4")
    ("Uranyl" "UO2")
    ("Methane" "CH4")
    ("Oxalic Acid" "C2H2O4")
    ("Propanol" "C3H7OH")
    ("Glucose" "C6H12O6")
    ("Sucrose" "C12H22O11")
    ("Methanol" "CH4O")
    ("Propane" "C3H8")
    ("Acetylsalicylic Acid (Aspirin)" "C9H8O4")
    ("Ethane" "C2H6")
    ("Citric Acid" "C6H8O7")
    ("Tetrahydrofuran (THF)" "C4H8O")
    ("Urea" "CH4N2O")
    ("Butan-1-ol" "CH3CH2CH2CH2OH")
    ("Hexane" "C6H14")
    ("Ethanol" "C2H5OH")
    ("Quinine" "C20H24N2O2")
    ("Dimethyl Ether (DME)" "CH3OCH3")
    ("Lactic Acid" "C3H6O3")
    ("Retinol (Vitamin A)" "C20H30O")
    ("2,2,4-Trimethylpentane" "C8H18")
    ("Vitamin C" "C6H8O6")
    ("1-propanol" "CH3CH2CH2OH")
    ("Benzocaine" "C9H11O2")
    ("Caffeine" "C8H10N4O2")
    ("Benzene" "C6H6")
    ("Butane" "C4H10")
    ("Pentane" "C5H12")
    ("Phenobarbital" "C12H12N2O3")
    ("Phenol" "C6H6O")
    ("Phenolphthalein" "C20H14O4")
    ("Glycerin" "C3H8O3")
    ("Cyclodecane" "C10H20")
    ("EDTA (Ethylenediamine-N,N,N ,N -tetraacetic Acid)" "C10H16N2O8")
    ("Nitroethene" "NC2H3O2")
    ("Propylamine" "CH3CH2CH2NH2")
    ("Cholesterol" "C27H46O")
    ("LSD" "C20H25N3O")
    ("Butyl Alcohol" "C4H9OH")
    ("Ascorbic Acid" "HC6H7O6")
    ("Ethylene Oxide" "C2H4O")
    ("Acetylene" "C2H2")
    ("Dimethylamine" "C2H7O")
    ("Ethylene Glycol" "C2H6O2")
    ("Acetylsalicylic Acid" "HC9H7O4")
    ("Toluene" "C7H8")
    ("Ceftriaxone" "C18H18N8O7S3")
    ("Formic Acid" "CH2O2")
    ("Isopropanol" "C3H8O")
    ("Deoxyribose" "C5H10O4")
    ("Benzaldehyde" "C7H6O")
    ("Decane" "C10H22")
    ("Formaldehyde" "CH2O")
    ("Menthol" "C10H20O")
    ("Penicillin G" "C16H18N2O4S")
    ("Acrylonitrile" "C3H3N")
    ("1,4-Cyclohexadiene" "C6H8")
    ("Cyclohexene" "C6H10")
    ("Difluoromethane" "CH2F2")
    ("Terpineol" "C10H18O")
    ("Trinitrotoluene" "C7H5N3O6")
    ("1,3-Butadiene" "C4H6")
    ("Cyclopentane" "C5H10")
    ("Diethyl Ether" "C4H10O")
    ("Diphenylmethanol (Benzhydrol)" "C13H12O")
    ("Lauric Acid" "C12H24O2")
    ("Malic Acid" "C4H6O5")
    ("Piperidine" "C5H11N")
    ("Stearic Acid" "C18H36O2")
    ("Triethylamine" "C6H15N")
    ("Adipic Acid" "C6H10O4")
    ("Benzilic Acid" "C14H12O3")
    ("Cinnamaldehyde" "C9H8O")
    ("Acetic Anhydride" "C4H6O3")
    ("Diethylamine" "C4H11N")
    ("Cellulose" "C6H10O5")
    ("Aspartame" "C14H18N2O5")
    ("Barbituric Acid" "C4H4N2O3")
    ("Cinnamyl Alcohol" "C9H10O")
    ("Melatonin" "C13H16N2O2")
    ("Methylcyclohexane" "C7H14")
    ("Diacetyl Peroxide" "C4H6O4")
    ("Tetradecane" "C14H30")
    ("Tridecane" "C13H28")
    ("Octadecane" "C18H38")
    ("2-butene" "CH3CHCHCH3")
    ("Dodecane" "C12H26")
    ("Estradiol" "C18H24O2")
    ("Ethene" "C2H4")
    ("Ethyl Acetate" "C4H8O2")
    ("Gluconic Acid" "C6H12O7")
    ("Indigo Dye" "C16H10N2O2")
    ("Methylamine" "CH5N")
    ("Piperonal" "C8H6O3")
    ("Propiolic Acid" "C3H2O2")
    ("Vitamin B2" "C17H20N4O6")
    ("Methanethiol" "CH3SH")
    ("Ethylenediamine" "NH2CH2CH2NH2")
    ("Lauryl Alcohol" "C12H26O")
    ("Phenylacetylene" "C8H6")
    ("Serotonin" "C10H12N2O")
    ("Vanillin" "C8H8O3")
    ("Benzophenone" "C13H10O")
    ("Oxytocin" "C43H66N12O12S2")
    ("Benzil" "C14H10O2")
    ("Biphenyl" "C12H10")
    ("2,6-Di-tert-butylphenol" "C11H13O")
    ("Eicosane" "C20H42")
    ("Ethynol" "C2H2O")
    ("Sildenafil (Viagra)" "C22H30N6O4S")
    ("Warfarin" "C19H16O4")
    ("4-methylcyclohexanol" "C7H14O")
    ("Acetophenone" "C8H8O")
    ("Methyl Isobutyl Ketone (MIBK)" "C6H12O")
    ("Salicylaldehyde" "C7H6O2")
    ("Methanol Hydrate" "CH6O2")
    ("Adonitol" "C5H12O5")
    ("Nonane" "C9H20")
    ("Palmitic Acid" "C16H32O2")
    ("Prednisone" "C21H26O5")
    ("Progesterone" "C21H30O2")
    ("Rosolic Acid" "C19H14O3")
    ("Styrene" "C8H8")
    ("Undecane" "C11H24")
    ("Antipyrine" "C11H12N2O")
    ("18-Crown-6" "C12H24O6")
    ("Direct Blue 1" "C34H28N6O16S4")
    ("Fumaric Acid" "C4H4O4")
    ("Isooctanol" "C8H18O")
    ("Myrcene" "C10H16")
    ("Nitroglycerine" "C3H5N3O9")
    ("Pentadecane" "C15H32")
    ("Phenanthrene" "C14H10")
    ("Phencyclidine" "C17H25N")
    ("Pyrrole" "C4H5N")
    ("Thiourea" "CH4N2S")
    ("Phthalic Acid" "H2C8H4O4")
    ("Colistin" "C52H98N16O13")
    ("Erythrose" "C4H8O4")
    ("Hexadecane" "C16H34")
    ("Hexanoic Acid" "C6H12O2")
    ("Peroxyacetic Acid" "C2H4O3")
    ("Tannic Acid" "C76H52O46")
    ("Tetrahedrane" "C4H4")
    ("Methylidenethiane" "C6H10S")
    ("Isopentyl Acetate" "C7H14O2")
    ("Anisole" "C6H5OCH2")
    ("Creatine" "C4H9N3O2")
    ("Cresol" "C7H8O")
    ("Eugenol" "C10H12O2")
    ("Formoterol" "C19H24N2O4")
    ("Heptadecane" "C17H36")
    ("Phenol Red" "C19H14O5S")
    ("Trimethylamine" "C3H9N")
    ("Methoxyethane" "CH3OCH2CH2CH3")
    ("Benzothiophene" "C8H6S")
    ("Benzyldimethylamine" "C9H13N")
    ("Cinchonine" "C19H22N2O")
    ("Dibucaine Hydrochloride" "C20H29N3O2")
    ("9-Fluorenone" "C13H8O")
    ("Nicotine" "C10H14N2")
    ("Para Red" "C16H11N3O3")
    ("Strychnine" "C21H22N2O2")
    ("Tartaric Acid" "C4H6O6")
    ("Gentamicin" "C21H43N5O7")
    ("Capreomycin" "C25H44N14O8")
    ("Acetonitrile" "C2H3N")
    ("Acyclovir" "C8H11N5O3")
    ("Barbital" "C8H12N2O3")
    ("Carminic Acid" "C22H20O13")
    ("Cetyl Alcohol" "C16H34O")
    ("Cyclohexane" "C6H12")
    ("Cyclonite" "C3H6N6O6")
    ("Digitonin" "C56H92O29")
    ("Dimethylglyoxime" "C4H8N2O2")
    ("Glutaric Acid" "C5H8O4")
    ("Histamine" "C5H9N3")
    ("Linoleic Acid" "C18H32O2")
    ("Phenethylamine" "C8H11N")
    ("Pyridine" "C5H5N")
    ("P-Toluic Acid" "C8H8O2")
    ("1,1,1-Trifluoroethane" "C2H3F3")
    ("Triphenylmethanol" "C19H16O")
    ("Vinyl Acetate" "C4H6O2")
    ("Cyclohexanol" "C6H11OH")
    ("Toluenesulfonic Acid" "CH3C6H5SO3H")
    ("Cadaverine" "C5H14N2")
    ("Cyclopentanone" "C5H8O")
    ("Dioctyl Phthalate" "C24H38O4")
    ("Heptane" "C7H16")
    ("Linolenic Acid" "C18H30O2")
    ("Mauveine" "C26H23N4")
    ("Naphthalene" "C10H8")
    ("Norcarane" "C7H12")
    ("Pyrimidine" "C4H4N2")
    ("Resorcinol" "C6H6O2")
    ("Testosterone" "C19H28O2")
    ("Tocopherol (Vitamin E)" "C29H50O2")
    ("Triethylene Glycol" "C6H14O4")
    ("Triphenylphosphine" "C18H15P")
    ("Vitamin M" "C19H19N7O6")
    ("Actinomycin D" "C62H85N12O16")
    ("Pyrazinamide" "C5H5N3O")
    ("Streptomycin" "C21H39N7O12")
    ("Methaphetamine" "C10H15N")
    ("Hypooxalous Acid" "H2C2O2")
    ("Inositol" "C4H12O6")
    ("Gluconolactone" "C6H10O6")
    ("Adenosine" "C10H13N5O4")
    ("Allyl Propyl Disulfide" "C6H12S2")
    ("Behenic Acid" "C22H44O2")
    ("Benzylidene Acetone" "C10H10O")
    ("Carboxypolymethylene" "C3H4O2")
    ("Citral" "C10H16O")
    ("Dehydrocholic Acid" "C24H34O5")
    ("Diisopropyl Ether" "C6H14O")
    ("Glyoxal" "C2H2O2")
    ("Jasmone" "C11H16O")
    ("2,6-Lutidine" "C7H9N")
    ("Metaldehyde" "C8H16O4")
    ("Naphthoquinone" "C10H6O2")
    ("Orcinol" "C7H8O2")
    ("Sarin" "C4H10FO2P")
    ("Tetrathiafulvalene" "C6H4S4")
    ("Tetrazine" "C2H2N4")
    ("Thalidomide" "C13H10N2O4")
    ("Thiophene" "C4H4S")
    ("Thymine" "C5H6N2O2")
    ("Triethylenediamine" "C6H12N2")
    ("Vitamin S" "C7H6O3")
    ("Acetyldioxidanyl" "C2H3O3")
    ("Penicillin V" "C16H18N2O5S")
    ))

(defun parse-formula (ms)
  (simplify-parsed-formula
   (loop for (e . n*) in 
	 ;; UUU This is ultra ugly; it can probably be cleaned up!
	 (let (r s (p 0) (msl (length ms)))
	   (prog 
	    ()
	    next
	    (if (>= p msl) (return (reverse r))) ;; Ran off the end "normally"
	    ;; Find the longest matching element name (e.g., prefer "Fe" over "F")
	    ;; (UUU Since their all 1 or 2, this could be simplified!)
	    (setf s (loop for (nil symbol nil nil) in *elements*
			  as m = (search symbol ms :start2 p)
			  with l = 0
			  with s = nil
			  do (if m
				 (if (= m p)
				     (if (> (length symbol) l) ;; Only swap if this one's longer than the one we have
					 (setq l (length symbol)
					       s symbol))))
			  finally (return s)))
	    (when (null s)
	      (format t "~%******** Warning! ~a contains an element that can't be foundm or some other problem! *************~%" ms)
	      (return nil))
	    (incf p (length s))
	    (if (>= p msl) (return (reverse (push `(,s #\1) r)))) ;; Ran out at the end of an element (e.g., H2>O<)
	    ;; Parse the number, if any, or just return 1
	    (setq n
		  (or (loop for c = (aref ms p) ;; If this doesn't find a number, it'll return nil
			    with r = nil
			    until (not (member c '(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9) :test #'char-equal))
			    do 
			    (push c r)
			    (incf p) 
			    (if (>= p msl) (return (reverse r))) ;; Hit the end!
			    finally (return (reverse r)) ;; Normal completion
			    )
		      '(#\1) ;; No number => 1
		      ))
	    (push (cons s n) r) ;; Normal drop out with an element symbol and a number
	    (go next)
	    ))
	 ;; WWW This looks like it's in the prog, but it's actually
	 ;; outside, and just gather together and numberifies the
	 ;; output of that ugly prog algorithm.
	 collect (cons e (parse-integer (coerce n* 'string)))
	 )
   ))
	      
;; Combine the number of atoms of the same element
(defvar *spf-atom->count* (make-hash-table :test #'equal))
(defun simplify-parsed-formula (pf)
  (clrhash *spf-atom->count*)
  (loop for (atom . count) in pf
	do (incf (gethash atom *spf-atom->count* 0) count))
  (loop for atom being the hash-keys of *spf-atom->count*
	using (hash-value n)
	collect (cons atom n)))

(defvar *f->pf* (make-hash-table :test #'equal))
(defun mw (name-or-formula) ;; Molecular weight
  (or (gethash name-or-formula *f->pf*)
      (let ((result
	     (let ((formula (find name-or-formula *mols* :test #'string-equal :key #'first)))
	       (let ((pf (parse-formula (or (second formula) name-or-formula))))
		 (list 
		  (loop for (ename . n) in pf
			as elt = (find ename *elements* :test #'string-equal :key #'second)
			sum (* n (fourth elt))) pf)))))
	(setf (gethash name-or-formula *f->pf*) result)
	result)
	))

(defun test ()
  (labels 
   ((try (mw n/f)
	 (unless (= mw (car (mw n/f)))
	   (error "******************** ERROR: Came up with ~a as the mw of ~a, predicted ~a *********************" (mw n/f) n/f mw))))
   (try 18 "H2O")
   (try 350 "Penicillin V")
   (try 73 "Nitroethene")
   (try 492 "Carminic Acid")
   (try 34 "H2O2")
   )
  ;; Order all the molecules by their molecular weight
  (loop for entry in 
	(sort 
	 (loop for (name formula) in *mols*
	       as (mw spf) = (mw formula)
	       as neighbors = (loop for (n2 f2) in *mols*
				    unless (string-equal formula f2)
				    when (neighbor-mols spf (second (mw f2)))
				    collect `(,n2 ,f2))
	       unless (null (cdr spf)) ;; There has to be more than one, or it gives away the game
	       collect (list mw name formula spf neighbors))
	 #'>
	 :key #'first
	 )
	as (mw name formula spf neighbors) = entry
	do 
	(format t "~%~%--- ~a (~a = ~a) ---~%" name formula mw)
	;;(pprint entry)
	;;(when neighbors (format t "~% ** Neighbors:~%"))
	(loop for n in neighbors
	      do (format t "    ~a (~a): ~a~%" (first n) (second n) (car (mw (second n)))))
	))

;;; Test if two molecules are exactly one atom from one another. This
;;; does this the very hardest possible way, by expanding out all the
;;; atoms, and then doing a set diff. UUU %%%

(defun neighbor-mols (m1 m2)
  (labels
   ((expand (m) (loop for (e . n) in m append (loop for i below n collect e))))
   (let* ((ex1 (expand m1))
	 (ex2 (expand m2))
	 (sd12 (length (nrep-set-difference ex1 ex2)))
	 (sd21 (length (nrep-set-difference ex2 ex1)))
	 )
     (or (and (= 1 sd12) (zerop sd21))
	 (and (= 1 sd21) (zerop sd12)))
     )))

;;; Version of sd that honors redundancies

(defun nrep-set-difference (s1 s2 &key (test #'string-equal))
  (loop for e2 in s2
	do (setq s1 (remove e2 s1 :test test :count 1))
	finally (return s1)))

(untrace)
;(trace mw parse-formula)
(test)